#!/bin/bash
#
# Display PNG images of syntax highlighted code


# program used to open PNG images (edit as necessary)
VIEWER=ristretto

error(){
    echo "ERROR: $@" >&2
}

handle-image(){
    if (( $# == 0 )); then
        error "No image file was specified"
    elif [[ ! -f $1 ]]; then
        error "'$1' is not a file"
    elif [[ ! -r $1 ]]; then
        error "No read permissions for '$1'"
    elif [[ ! $1 =~ ^/tmp/ ]]; then
        error "'$1' is not in /tmp"
    elif [[ ! $1 =~ \.(bmp|gif|img|jpeg|jpg|png)$ ]]; then
        error "'$1' does not appear to be an image file"
    else
        "$VIEWER" "$1" &>/dev/null
        rm -f "$1" &>/dev/null && return 0
    fi

    return 1
}

pygrunner(){

    local extension lexer mimetype target tempfile

    if [[ "${OPTIONS[@]}" = *executable* ]]; then
        target=$(type -P "$1")
    else
        target=$1
    fi

    mimetype=$(file --brief --dereference --mime-type "$target" 2>/dev/null)

    if [[ -z $target ]]; then
        error "'$1' is not a valid target"
        return 1
    elif [[ ! -f $target ]]; then
        error "'$target' does not exist"
        return 1
    elif [[ ! -r $target ]]; then
        error "'$target' is not readable"
        return 1
    elif [[ ! -s $target ]]; then
        error "'$target' is empty"
        return 1
    elif [[ ! $mimetype =~ ^text/ ]]; then
        error "'$target' is not a text file"
        return 1
    fi

    # determine file extension
    extension=$(awk -F. '/.\./ {print $NF}' <<<"${target##*/}")

    # use bash lexer if target file does not have an extension
    if [[ -z $extension || $mimetype =~ ^text/(plain|x-shellscript)$ ]]; then
        lexer='-l bash'
    elif [[ $extension =~ ^py[23]$ || $mimetype = 'text/x-python' ]]; then
        lexer='-l python'
    fi

    tempfile="/tmp/pygsparkle-${RANDOM}.png"

    if pygmentize -f png $lexer -O 'font_name=DejaVu Sans Mono,font_size=14,image_pad=15,line_number_pad=15,line_pad=6,style=native' -o "$tempfile" "$target"; then
        handle-image "$tempfile" &
    fi

}

usage(){
    echo "Usage: $PROGRAM FILE..."
    echo "Display PNG images of syntax highlighted code"
    echo
    echo "  -x, --executable      display syntax of an executable on the system PATH"
    exit 0
}


PROGRAM=${0##*/}
params=$(getopt -o 'h,x' -l 'help,executable' -n "$PROGRAM" -- "$@") || exit 1

eval set -- "$params"

for argument in "$@"; do
    if (( last_option == 1 )); then
        files+=("$argument")
    else
        case $argument in
            -h|--help)
                usage
                ;;
            -x|--executable)
                OPTIONS+=('executable')
                ;;
            --)
                last_option=1
                ;;
            *)
                files+=("$argument")
                ;;
        esac
    fi
done

if (( ${#files[@]} == 0 )); then
    echo "$PROGRAM: missing operand" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
fi

for file in "${files[@]}"; do
    pygrunner "$file"
done
