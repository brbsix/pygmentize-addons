#!/bin/bash
#
# Display PNG images of syntax highlighted code


error(){
    echo "ERROR: $@" >&2
}

handle-image(){
    if (( $# == 0 )); then
        error "No image file was specified"
    elif [[ ! -f $1 ]]; then
        error "'$1' is not a file"
    elif [[ ! -r $1 ]]; then
        error "No read permissions for '$1'"
    elif [[ ! $1 =~ ^/tmp/ ]]; then
        error "'$1' is not in /tmp"
    elif [[ ! $1 =~ \.(bmp|gif|img|jpeg|jpg|png)$ ]]; then
        error "'$1' does not appear to be an image file"
    else
        ristretto "$1" &>/dev/null
        rm -f "$1" &>/dev/null
        return 0
    fi

    return 1
}

usage(){
    echo "Usage: ${0##*/} FILE..."
    echo "Display PNG images of syntax highlighted code"
    echo
    echo "  -x, --executable      display syntax of an executable on the system PATH"
    exit 0
}


eval set -- "$(getopt -o 'h,x' -l 'help,executable' -n "${0##*/}" -- "$@")"

if (( $? != 0 )); then
    exit 1
fi

for argument in "$@"; do
    if (( last_option == 1 )); then
        files+=("$argument")
    else
        case $argument in
            -h|--help)
                usage
                ;;
            -x|--executable)
                options+=("executable")
                ;;
            --)
                last_option=1
                ;;
            *)
                files+=("$argument")
                ;;
        esac
    fi
done

if (( ${#files[@]} == 0 )); then
    error "Missing operand"
    echo "Try 'chmod --help' for more information." >&2
    exit 1
fi

for file in "${files[@]}"; do

    if [[ ${options[@]} = *executable* ]]; then
        target=$(type -P "$file")
    else
        target=$file
    fi

    if [[ -z $target ]]; then
        error "'$file' is not a valid target"
        continue
    elif [[ ! -f $target ]]; then
        error "'$target' does not exist"
        continue
    elif [[ ! -r $target ]]; then
        error "'$target' is not readable"
        continue
    elif [[ ! -s $target ]]; then
        error "'$target' is empty"
        continue
    elif [[ ! $(file --brief --dereference --mime-type "$target") =~ ^text/ ]]; then
        error "'$target' is not a text file"
        continue
    fi

    # determine file extension
    ext=$(awk -F. '/.\./ {print $NF}' <<<"${target##*/}")

    # use bash lexer if target file does not have an extension
    if [[ -z $ext ]]; then
        lexer='-l bash'
    elif [[ $ext =~ ^py[23]$ ]]; then
        lexer='-l python'
    fi

    tempfile="/tmp/pygsparkle-${RANDOM}.png"
    pygmentize -f png $lexer -O "font_name=DejaVu Sans Mono,font_size=14,image_pad=15,line_number_pad=15,line_pad=6,style=native" -o "$tempfile" "$target"
    handle-image "$tempfile" &

done
