#!/bin/bash
#
# Display a syntax highlighted code


error(){
    echo "ERROR: $@" >&2
}

pygmentize(){
    "python${PYVER}" - "$@" <<-EOF
	import sys
	import pygments.cmdline
	try:
	    sys.exit(pygments.cmdline.main(sys.argv))
	except KeyboardInterrupt:
	    sys.exit(1)
	EOF
}

pygrunner(){

    local cmd extension lexer mimetype target
    unset cmd extension lexer mimetype target

    if [[ "${OPTIONS[@]}" = *executable* ]]; then
        # set target to the full path of script
        target=$(type -P "$1")
    else
        target=$1
    fi

    # determine file type
    mimetype=$(file --brief --dereference --mime-type "$target" 2>/dev/null)

    if [[ -z $target ]]; then
        error "'$1' is not a valid target"
        return 1
    elif [[ ! -f $target ]]; then
        error "'$target' does not exist"
        return 1
    elif [[ ! -r $target ]]; then
        error "'$target' is not readable"
        return 1
    elif [[ ! -s $target ]]; then
        error "'$target' is empty"
        return 1
    fi

    # verify that $target is a text file (unless --force is used)
    if [[ "${OPTIONS[@]}" != *force* && ! $mimetype =~ ^text/ ]]; then
        error "'$target' is not a text file"
        return 1
    fi

    # determine file extension
    extension=$(awk -F. '/.\./ {print $NF}' <<<"${target##*/}")

    # determine pygmentize lexer via mime type and/or extension
    if [[ $mimetype =~ ^text/(plain|x-shellscript)$ && -z $extension ]]; then
        lexer='bash'
    elif [[ $mimetype = 'text/x-perl' ]]; then
        lexer='perl'
    elif [[ $mimetype = 'text/x-python' || $extension =~ ^py[23]$ ]]; then
        lexer='python'
    elif [[ $mimetype = 'application/xml' ]]; then
        lexer='xml'
    fi

    # add lexer option prefix (if necessary)
    [[ -n $lexer ]] && lexer="-l $lexer"

    # configure the pygmentize command
    cmd='pygmentize -f 256 $lexer -O style=native "$target"'

    # execute the pygmentize command
    if [[ "${OPTIONS[@]}" = *less* ]]; then
        eval -- "$cmd" | less -R
    else
        eval -- "$cmd"
    fi

}

pyver(){
    # ensure python is installed
    hash "python${1}" &>/dev/null || return 1

    # ensure Pygments is installed
    "python${1}" - <<-EOF
	import sys

	try:
	    import pygments.cmdline
	    sys.exit(0)
	except ImportError:
	    pass

	sys.exit(1)
	EOF
}

usage(){
    cat <<-EOF
	Usage: $PROGRAM [OPTION]... FILE...
	Display syntax highlighted code.

	  -f, --force           continue even if mime type of FILE is not text/plain
	  -l, --less            use less to display command output
	  -x, --executable      display syntax of an executable on the system PATH
	EOF
    exit 0
}


shopts='f,h,l,x'
lopts='executable,force,help,less'
PROGRAM=${0##*/}

params=$(getopt -o "$shopts" -l "$lopts" -n "$PROGRAM" -- "$@") || exit 1

eval set -- "$params"

files=()
last_option=0
OPTIONS=()

for argument in "$@"; do
    if (( last_option == 1 )); then
        files+=("$argument")
    else
        case $argument in
            -f|--force)
                OPTIONS+=('force')
                ;;
            -h|--help)
                usage
                ;;
            -l|--less)
                OPTIONS+=('less')
                ;;
            -x|--executable)
                OPTIONS+=('executable')
                ;;
            --)
                last_option=1
                ;;
            *)
                files+=("$argument")
                ;;
        esac
    fi
done

if (( ${#files[@]} == 0 )); then
    echo "$PROGRAM: missing operand" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
fi

if pyver 2; then
    PYVER=2
elif pyver 3; then
    PYVER=3
else
    error "Pygments does not appear to be installed"
    exit 1
fi

for file in "${files[@]}"; do
    pygrunner "$file"
done
