#!/bin/bash
#
# Display a syntax highlighted code


error(){
    echo "ERROR: $@" >&2
}

pygrunner(){

    local comm extension lexer mimetype target

    if [[ "${OPTIONS[@]}" = *executable* ]]; then
        # set target to the full path of script
        target=$(type -P "$1")
    else
        target=$1
    fi

    # determine file type
    mimetype=$(file --brief --dereference --mime-type "$target" 2>/dev/null)

    if [[ -z $target ]]; then
        error "'$1' is not a valid target"
        return 1
    elif [[ ! -f $target ]]; then
        error "'$target' does not exist"
        return 1
    elif [[ ! -r $target ]]; then
        error "'$target' is not readable"
        return 1
    elif [[ ! -s $target ]]; then
        error "'$target' is empty"
        return 1
    elif [[ ! $mimetype =~ ^text/ ]]; then
        error "'$target' is not a text file"
        return 1
    fi

    # determine file extension
    extension=$(awk -F. '/.\./ {print $NF}' <<<"${target##*/}")

    # use bash lexer if target file does not have an extension
    if [[ -z $extension || $mimetype =~ ^text/(plain|x-shellscript)$ ]]; then
        lexer='-l bash'
    elif [[ $extension =~ ^py[23]$ || $mimetype = 'text/x-python' ]]; then
        lexer='-l python'
    fi

    # set the pygmentize command
    comm='pygmentize -f 256 $lexer -O style=native "$target" 2>/dev/null'

    # execute the pygmentize command
    if [[ "${OPTIONS[@]}" = *less* ]]; then
        eval "$comm" | less -R
    else
        eval "$comm"
    fi

}

usage(){
    echo "Usage: $PROGRAM [OPTION] FILE"
    echo "Display syntax highlighted code"
    echo
    echo "  -l, --less            use less to display command output"
    echo "  -x, --executable      display syntax of an executable on the system PATH"
    exit 0
}


shopts='h,l,x'
lopts='executable,help,less'
PROGRAM=${0##*/}

params=$(getopt -o "$shopts" -l "$lopts" -n "$PROGRAM" -- "$@") || exit 1

eval set -- "$params"

for argument in "$@"; do
    if (( last_option == 1 )); then
        files+=("$argument")
    else
        case $argument in
            -h|--help)
                usage
                ;;
            -l|--less)
                OPTIONS+=('less')
                ;;
            -x|--executable)
                OPTIONS+=('executable')
                ;;
            --)
                last_option=1
                ;;
            *)
                files+=("$argument")
                ;;
        esac
    fi
done

if (( ${#files[@]} == 0 )); then
    echo "$PROGRAM: missing operand" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
fi

for file in "${files[@]}"; do
    pygrunner "$file"
done
